(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{154:function(e,t,a){"use strict";a.r(t);var o=a(0),r=Object(o.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("p",[e._v("Toro always tries to work well with RecyclerView, and ExoPlayer 2 (below: ExoPlayer). In previous release (3.6.x), I provided a mechanism to cache and reuse some expensive objects including ExoPlayer instance. In this mechanism, ExoPlayer instances are cached using a Pool that is mapped to a Config. This config gives the ExoCreator some cached resources to create the ExoPlayer on-demand, as well as MediaSource instance. There are, to be honest, some issue hiding inside the caching method, and also some error-prone there. If you could follow the development close enough, I guess you may be able to point out some, like below:")]),a("ul",[a("li",[a("p",[e._v("As the Config has a BaseMeter (which is simply a combination of a BandwidthMeter and a TransferListener), this BaseMeter will be reused to create many ExoPlayer instances. In fact, "),a("a",{attrs:{href:"https://github.com/google/ExoPlayer/issues/3705#issuecomment-357620806",target:"_blank",rel:"noopener noreferrer"}},[e._v("this comment"),a("OutboundLink")],1),e._v(" suggests that using same BandwidthMeter among multiple ExoPlayer instances is not a good idea (though we may actually have only one active play at a time).")])]),e._m(0),e._m(1),e._m(2)]),a("p",[e._v("In 3.7.0, I try to address these issues, and make a huge change in the code base to make it more flexible, yet still being a powerful implementation on top of ExoPlayer to help your life easier.")]),e._m(3),a("p",[e._v("First, let's get familiar with some important concepts that end up existing in this release (some of them are there in 3.6.x already):")]),e._m(4),e._m(5),e._m(6),a("p",[e._v("This class has the interface simillar to a ToroPlayer, though it can be thought as a delegation of playback behaviour. The purpose is to be consistent with ToroPlayer's API, but on the back, it can adapts various playback API to provide actual behaviour. In my lib, and demo, I show how to extend this class to work with ExoPlayer, Android MediaPlayer and even YoutubePlayer API.")]),e._m(7),a("p",[e._v("This is a core concept of the extension for ExoPlayer. Its purpose is to connect ExoPlayer's playback API to the ToroPlayerHelper API. Custom ToroPlayerHelper will be built around this interface to connect ExoPlayer with ToroPlayer. The DefaultPlayable is a default implementation. I learnt from ExoPlayer's demo app, as well as tiny bits from others to make this class as powerful as possible. Though, to be honest, there are many rooms for improvement at the moment. You do not need Playable to build custom ToroPlayerHelper that supports ExoPlayer, but you may eventually need one.")]),e._m(8),a("p",[e._v("This interface is new in 3.7.0.")]),a("p",[e._v("In 3.6.x, I manage the ExoPlayer instances in the global scope of ToroExo. I think that, as playback consumes system's resource, regardless of how your app being constructed, those resource should be manage from root. In 3.7.0, the concern is unchanged, but I change the way to present how to do it.")]),a("p",[e._v("ExoPlayerManager has only 3 methods: one to construct an ExoPlayer instance 'from somewhere', one to release the ExoPlayer instance 'to somewhere' and one to clean up everything on demand. The implementation is not limited to anything complicated. You can always create new instance when need, and release it right away.")]),a("p",[e._v("My default implementation, on the other hand, divides the usecases in to DRM and non-DRM playback. In non-DRM playback, all the resources can be reused without risk, so I heep a Pool to manage ExoPlayer instances. This helps you to resuse resource as much as you can, without any drop in performance. In DRM playback, on the other hand, I will always create new instances and release the old ones as soon as possible. DRM playback is not easy, not only because there are many constraint, but also it is where your content is secured. I don't want to risk it with bad implementation.")]),a("p",[e._v("Once constructed, the ExoPlayerManager instance should be accessible across your App. This way, the resource management is still global. In 2018, when DI (dependencies injection) is becoming common practice to provide resource in your App, ExoPlayerManager could be a part of it: construct the instance from DI, pass it around by DI and you are all set.")]),e._m(9),a("p",[e._v("This interface is new in 3.7.0. Its purpose is to build a new BandwidthMeter when creating a new ExoPlayer instance. As said before, it'd better to have BandwidthMeter to be used by only one ExoPlayer instance. Having a factory will be easy enough to make it. In my default implementation of ExoPlayerManager, it requires a BandwidthMeterFactory to provide BandwidthMeter to the ExoPlayer on demand.")]),e._m(10),a("p",[e._v("This interface is new in 3.7.0. Same as BandwidthMeterFactory, this interface is to build DrmSessionManager when creating a new ExoPlayer instance. Difference to the BandwidthMeter is that, the DrmSessionManager is not always required. So for non-DRM content, this interface just need to return nothing (a.k.a null).")]),e._m(11),a("p",[e._v("This interface is new in 3.7.0. This is another important component in this release.")])])},[function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("p",[this._v("The mechanism may work well on non-DRM content, as we may need only one Config, and therefore one ExoCreator and so on. But it may not work well on DRM heavy application.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("p",[this._v("Customizing the interfaces is not straight forward. I can say that you have close to zero flexibility when using this mechanism. Even though it may be as easy as extending my default classes, or having composition with default ones, etc, the 'easy to do' way is not so obvious out of the box.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("li",[t("p",[this._v("If you care about testing, though Toro contains close to zero test case, I still care about how your would do with your app. And to be honest, having global instance of ToroExo prevents you from mocking it for any unit test you may want to do. In shot, Toro is not so testable library.")])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"review"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#review","aria-hidden":"true"}},[this._v("#")]),this._v(" Review")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"toroplayer"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#toroplayer","aria-hidden":"true"}},[this._v("#")]),this._v(" ToroPlayer")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("As you all know, this is the heart of Toro. This interface defines necessary playback behaviors, as well as some constraint to tell the library when to do what. This interface is expected to implemented by a RecyclerView's ViewHolder to work with "),t("strong",[this._v("Container")]),this._v(" (a custom RecyclerView, the brain of Toro).")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"toroplayerhelper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#toroplayerhelper","aria-hidden":"true"}},[this._v("#")]),this._v(" ToroPlayerHelper")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"playable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#playable","aria-hidden":"true"}},[this._v("#")]),this._v(" Playable")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"exoplayermanager"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exoplayermanager","aria-hidden":"true"}},[this._v("#")]),this._v(" ExoPlayerManager")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"bandwidthmeterfactory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bandwidthmeterfactory","aria-hidden":"true"}},[this._v("#")]),this._v(" BandwidthMeterFactory")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"drmsessionmanagerprovider"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#drmsessionmanagerprovider","aria-hidden":"true"}},[this._v("#")]),this._v(" DrmSessionManagerProvider")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h4",{attrs:{id:"mediasourcefactoryprovider"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mediasourcefactoryprovider","aria-hidden":"true"}},[this._v("#")]),this._v(" MediaSourceFactoryProvider")])}],!1,null,null,null);t.default=r.exports}}]);